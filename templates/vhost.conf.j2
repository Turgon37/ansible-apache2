#
# {{ ansible_managed }}
#
{% set vhost = item.value %}

{% if vhost.hosts is defined %}
{%   if vhost.hosts is string %}
<VirtualHost {{ vhost.hosts }}>
{%   elif vhost.hosts is iterable %}
<VirtualHost {% for host in vhost.hosts %} {% if host is string %}{{ host }}{% elif host is mapping %}{{ host.ip }}:{{ host.port | d(443 if vhost.https is defined else 80) }}{% endif %}{% endfor %}>
{%   endif %}
{% else %}
<VirtualHost *:{{ 443 if vhost.https is defined else 80 }}>
{% endif %}
    ServerName {{ vhost.servername }}
{% if vhost.serveralias is defined %}
    ServerAlias {{ vhost.serveralias }}
{% endif %}

{% if vhost.https is defined and (vhost.https.enabled | d(True) | bool)  %}
    <IfModule ssl_module>
        SSLEngine on
        SSLCertificateFile {{ vhost.https.certificate_file }}
        SSLCertificateKeyFile {{ vhost.https.certificate_key_file }}
{%   if vhost.https.certificate_chain_file is defined %}
        SSLCertificateChainFile {{ vhost.https.certificate_chain_file }}
{%   endif %}
{%   if vhost.https.verify_client is defined %}
        #   Client Authentication (Type):
        #   Client certificate verification type. Types are
        #   none, optional, require and optional_no_ca.
        SSLVerifyClient {{ vhost.https.verify_client }}
{%     if vhost.https.verify_client_depth is defined %}
        #   Depth is a number which specifies how deeply to verify 
        #   the certificate issuer chain before deciding the certificate
        #   is not valid.
        SSLVerifyDepth {{ vhost.https.verify_client_depth | d(10) }}
{%     endif %}
{%   endif %}
{%   if vhost.https.ca_certificate_path is defined %}
        #   Certificate Authority (CA):
        #   Set the CA certificate verification path where to find CA
        #   certificates for client authentication
        SSLCACertificatePath {{ vhost.https.ca_certificate_path }}
{%   endif %}
{%   if vhost.https.ca_certificate_file is defined %}
        #   Certificate Authority (CA):
        #   Set the CA certificate verification path where to find CA
        #   huge file containing all of client certificates (file must be PEM encoded)
        SSLCACertificateFile {{ vhost.https.ca_certificate_file }}
{%   endif %}
{%   if vhost.https.crl_path is defined %}
        #   Certificate Revocation Lists (CRL):
        #   Set the CA revocation path where to find CA CRLs for client
        #   authentication
        #   Note: Inside SSLCARevocationPath you need hash symlinks
        #                to point to the certificate files. Use the provided
        #                Makefile to update the hash symlinks after changes.
        SSLCARevocationPath {{ vhost.https.crl_path }}
{%   endif %}
{%   if vhost.https.crl_file is defined %}
        #   Certificate Revocation Lists (CRL):
        #   Set the CA revocation path where to find huge file containing all
        #   CA CRLs for client authentication (file must be PEM encoded)
        SSLCARevocationFile {{  vhost.https.crl_file }}
{%   endif %}
    </IfModule>
    <IfModule mod_gnutls.c>
        GnuTLSEnable on
        GnuTLSCertificateFile {{ vhost.https.certificate_file }}
        GnuTLSKeyFile {{ vhost.https.certificate_key_file }}
    </IfModule>
{% endif %}

{% if vhost.serveradmin is defined %}
    ServerAdmin {{ vhost.serveradmin }}
{% endif %}

{% if vhost.documentroot is defined %}
    DocumentRoot {{ vhost.documentroot }}

    <Directory "{{ vhost.documentroot }}">
        AllowOverride {{ vhost.allow_override | default(apache2__allow_override) }}
        AllowOverrideList {{ vhost.allow_override_list | default(apache2__allow_override_list) }}
        Options {{ vhost.options | default(apache2__options) }}
{%   if _apache2__version | version_compare('2.4', '<') %}
        Order allow,deny
        Allow from all
{%   else %}
        Require all granted
{%   endif %}
    </Directory>
{% endif %}

{% if vhost.headers is defined and vhost.headers is iterable %}
    <IfModule mod_headers.c>
{%   for header in vhost.headers %}
        Header {{ header }}
{%   endfor %}
    </IfModule>
{% endif %}

{% if vhost.files_match is defined and vhost.files_match is iterable %}
{%   for file_match in vhost.files_match %}
    <FilesMatch "{{ file_match.regexp}}">
{%     for action in file_match.actions %}
        {{ action }}
{%     endfor %}
    </FilesMatch>
{%   endfor %}
{% endif %}

{% if vhost.extra_parameters is defined and vhost.extra_parameters is iterable %}
{%   for param in vhost.extra_parameters %}
    {{ param }}
{%   endfor %}
{% endif %}

        ErrorLog /var/www/html/log/http.error
</VirtualHost>
